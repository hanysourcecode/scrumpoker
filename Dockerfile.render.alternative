# Alternative Render Dockerfile - More explicit file copying
# Use this if the main Dockerfile.render still has issues on Render

# Stage 1: Build the frontend React app
FROM node:20-alpine AS frontend-builder

# Set working directory
WORKDIR /app/frontend

# Copy frontend package files first for better caching
COPY frontend/package*.json ./

# Install frontend dependencies
RUN npm ci

# Copy frontend public directory (required for build)
COPY frontend/public ./public

# Copy frontend source directory
COPY frontend/src ./src

# Copy other frontend files
COPY frontend/README.md ./
COPY frontend/.gitignore ./

# Build the frontend for production
RUN npm run build

# Stage 2: Build the backend and serve both frontend and backend
FROM node:20-alpine AS production

WORKDIR /app

# Copy backend package files
COPY backend/package*.json ./

# Install backend dependencies
RUN npm ci --only=production

# Copy backend source code
COPY backend/ ./

# Copy the built frontend from the previous stage
COPY --from=frontend-builder /app/frontend/build ./public

# Copy Render start script
COPY start-render.sh ./
RUN chmod +x start-render.sh

# Expose port (Render will set PORT environment variable)
EXPOSE $PORT

# Start the backend server (which now also serves the frontend)
CMD ["./start-render.sh"]
